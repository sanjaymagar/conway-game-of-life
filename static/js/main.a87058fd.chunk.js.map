{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["neighborsOperations","generateEmptyGrid","Array","fill","App","useState","grid","setGrid","running","setRunning","runningRef","useRef","current","simulation","useCallback","gridValues","produce","cloneGrid","rowIndex","colIndex","neighbors","forEach","x","y","newRowIndex","newColIndex","setTimeout","className","onClick","prev","rows","i","push","from","Math","random","generateRandomGrid","map","id","toString","key","column","newGrid","style","backgroundColor","undefined","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uNAOMA,EAAsB,CAC1B,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,GAAI,GACL,EAAE,EAAG,GACL,CAAC,EAAG,GACJ,EAAE,GAAI,GACN,CAAC,EAAG,GACJ,EAAE,EAAG,IAEDC,EAAoB,kBAAMC,MAZxB,IAYmCC,KAAKD,MAbjC,IAa+CC,KAAK,KAqHpDC,EA5GO,WAAO,IAAD,EACFC,oBAAS,kBAAMJ,OADb,mBACnBK,EADmB,KACbC,EADa,OAGIF,oBAAS,GAHb,mBAGnBG,EAHmB,KAGVC,EAHU,KAKpBC,EAAaC,iBAAOH,GAC1BE,EAAWE,QAAUJ,EAErB,IAAMK,EAAaC,uBAAY,WACxBJ,EAAWE,UAIhBL,GAAQ,SAAAQ,GAAU,OAChBC,YAAQD,GAAY,SAAAE,GAClB,IADgC,IAAD,WACtBC,GACP,IAF6B,eAEpBC,GACP,IAAIC,EAAY,EAChBpB,EAAoBqB,SAAQ,YAAa,IAAD,mBAAVC,EAAU,KAAPC,EAAO,KAChCC,EAAcN,EAAWI,EACzBG,EAAcN,EAAWI,EAE7BC,GAAe,GACfA,EA5CR,IA6CQC,GAAe,GACfA,EA/CD,KAiDCL,GAAaL,EAAWS,GAAaC,OAIrCL,EAAY,GAAKA,EAAY,EAC/BH,EAAUC,GAAUC,GAAY,EAEG,IAAnCJ,EAAWG,GAAUC,IACP,IAAdC,IAEAH,EAAUC,GAAUC,GAAY,IArB3BA,EAAW,EAAGA,EAtClB,GAsCqCA,IAAa,EAA9CA,IADFD,EAAW,EAAGA,EApCvB,GAoCuCA,IAAa,EAA3CA,SA6BbQ,WAAWb,EAAY,QACtB,IAEH,OACE,yBAAKc,UAAU,aACb,wBAAIA,UAAU,UAAd,yBACA,yBAAKA,UAAU,oBACb,4BACEA,UAAU,SACVC,QAAS,WACPnB,GAAYD,GACPA,IACHE,EAAWE,SAAU,EACrBC,OAGHL,EAAU,OAAS,SAEtB,4BACEmB,UAAU,SACVC,QAAS,WACPrB,GAAQ,kBAAMN,OACVO,GACFC,GAAW,SAAAoB,GAAI,OAAKA,OAL1B,SAUA,4BACEF,UAAU,SACVC,QAAS,kBAAMrB,GAAQ,kBAlFN,WAEzB,IADA,IAAMuB,EAAO,GACJC,EAAI,EAAGA,EAfV,GAemBA,IACvBD,EAAKE,KAAK9B,MAAM+B,KAAK/B,MAjBV,KAiByB,kBAAOgC,KAAKC,SAAW,GAAM,EAAI,MAEvE,OAAOL,EA6E8BM,QAF/B,WAOD9B,EAAK+B,KAAI,SAACP,EAAgBZ,GAAjB,OACR,yBACES,UAAU,WACVW,GAAIpB,EAASqB,WACbC,IAAKtB,EAASqB,YACbT,EAAKO,KAAI,SAACI,EAAgBtB,GAAjB,OACR,yBACEQ,UAAU,OACVa,IAAG,UAAKtB,EAAL,YAAiBC,GACpBmB,GAAInB,EAASoB,WACbX,QAAS,WACP,IAAMc,EAAU1B,YAAQV,GAAM,SAAAW,GAC5BA,EAAUC,GAAUC,GAAYb,EAAKY,GAAUC,GAC3C,EACA,KAENZ,EAAQmC,IAEVC,MAAO,CACLC,gBAAiBtC,EAAKY,GAAUC,GAAY,YAAS0B,cChHjDC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a87058fd.chunk.js","sourcesContent":["import React, { useState, useCallback, useRef } from 'react';\nimport './App.css';\nimport { produce } from 'immer';\n\nconst COLUMN = 60,\n  ROW = 50;\n\nconst neighborsOperations = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [-1, 1],\n  [1, 1],\n  [-1, -1],\n  [1, 0],\n  [-1, 0],\n];\nconst generateEmptyGrid = () => Array(ROW).fill(Array(COLUMN).fill(0));\nconst generateRandomGrid = () => {\n  const rows = [];\n  for (let i = 0; i < ROW; i++) {\n    rows.push(Array.from(Array(COLUMN), () => (Math.random() > 0.7 ? 1 : 0)));\n  }\n  return rows;\n};\n\nconst App: React.FC = () => {\n  const [grid, setGrid] = useState(() => generateEmptyGrid());\n\n  const [running, setRunning] = useState(false);\n\n  const runningRef = useRef(running);\n  runningRef.current = running;\n\n  const simulation = useCallback(() => {\n    if (!runningRef.current) {\n      return;\n    }\n\n    setGrid(gridValues =>\n      produce(gridValues, cloneGrid => {\n        for (let rowIndex = 0; rowIndex < ROW; rowIndex++) {\n          for (let colIndex = 0; colIndex < COLUMN; colIndex++) {\n            let neighbors = 0;\n            neighborsOperations.forEach(([x, y]) => {\n              const newRowIndex = rowIndex + x;\n              const newColIndex = colIndex + y;\n              if (\n                newRowIndex >= 0 &&\n                newRowIndex < ROW &&\n                newColIndex >= 0 &&\n                newColIndex < COLUMN\n              ) {\n                neighbors += gridValues[newRowIndex][newColIndex];\n              }\n            });\n\n            if (neighbors < 2 || neighbors > 3) {\n              cloneGrid[rowIndex][colIndex] = 0;\n            } else if (\n              gridValues[rowIndex][colIndex] === 0 &&\n              neighbors === 3\n            ) {\n              cloneGrid[rowIndex][colIndex] = 1;\n            }\n          }\n        }\n      })\n    );\n\n    setTimeout(simulation, 100);\n  }, []);\n\n  return (\n    <div className='container'>\n      <h1 className='header'>Conway's Game of Life</h1>\n      <div className='button-container'>\n        <button\n          className='button'\n          onClick={() => {\n            setRunning(!running);\n            if (!running) {\n              runningRef.current = true;\n              simulation();\n            }\n          }}>\n          {running ? 'Stop' : 'Start'}\n        </button>\n        <button\n          className='button'\n          onClick={() => {\n            setGrid(() => generateEmptyGrid());\n            if (running) {\n              setRunning(prev => !prev);\n            }\n          }}>\n          Clear\n        </button>\n        <button\n          className='button'\n          onClick={() => setGrid(() => generateRandomGrid())}>\n          Random\n        </button>\n      </div>\n\n      {grid.map((rows: number[], rowIndex) => (\n        <div\n          className='row-grid'\n          id={rowIndex.toString()}\n          key={rowIndex.toString()}>\n          {rows.map((column: number, colIndex: number) => (\n            <div\n              className='rect'\n              key={`${rowIndex}-${colIndex}`}\n              id={colIndex.toString()}\n              onClick={() => {\n                const newGrid = produce(grid, cloneGrid => {\n                  cloneGrid[rowIndex][colIndex] = grid[rowIndex][colIndex]\n                    ? 0\n                    : 1;\n                });\n                setGrid(newGrid);\n              }}\n              style={{\n                backgroundColor: grid[rowIndex][colIndex] ? '#000' : undefined,\n              }}\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}